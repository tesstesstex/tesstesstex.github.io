<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[一身上の都合]]></title><description><![CDATA[作ったものから身の上話まで]]></description><link>https://tesstesstex.vercel.app</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 11 Jun 2021 12:22:13 GMT</lastBuildDate><item><title><![CDATA[YouTube Data API で登録済みチャンネルの中からライブ配信中のものだけ取得しようとしたがQuota の上限に引っかかった]]></title><description><![CDATA[YouTube Data API で何かをつくるにはQuota 制限のせいで実用的なものは難しいかもしれない。]]></description><link>https://tesstesstex.vercel.appmvs_aydhbjt9</link><guid isPermaLink="false">https://tesstesstex.vercel.appmvs_aydhbjt9</guid><pubDate>Sun, 30 May 2021 11:10:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;br&gt;YouTube 配信開始の通知はGoogle アカウントへのメールか、スマホへのポップアップ通知しかないので、自分でAPI 叩いてDiscord とかに通知飛ばせるようにするかと思いちょっとしたツールを作りました。 &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;が、一つ問題がありGCP のYouTube Data API は一日10,000 Queries というQuota(割当)上限が決められており、さらに使用するAPI によってQueries の使用量が定められています。 &lt;br&gt;Quota については&lt;a href=&quot;https://developers.google.com/youtube/v3/determine_quota_cost&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;公式のドキュメント&lt;/a&gt;をご確認ください。 &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;例を挙げると、 &lt;br&gt;チャンネル登録に関するAPI である&lt;code&gt;subscriptions.list&lt;/code&gt; を使用する場合はcost は  &amp;quot;&lt;strong&gt;1&lt;/strong&gt;&amp;quot; ですが、  &lt;br&gt;動画を検索する&lt;code&gt;search.list&lt;/code&gt; を使用する場合はcost は &amp;quot;&lt;strong&gt;50&lt;/strong&gt;&amp;quot;  も必要です。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;今回やりたかったことは流れとして、 &lt;br&gt;&lt;br&gt;1. 自分の登録チャンネルのID を取得する &lt;br&gt;2. 各チャンネルの配信中の配信があればそれを返す &lt;br&gt;3. それをDiscord とかで5分おき(配信開始は大抵キリの良い時間なので)に通知する &lt;br&gt;&lt;br&gt;って感じなんですが、YouTube Data API では配信中かどうかの情報は &lt;code&gt;videos&lt;/code&gt; または &lt;code&gt;search&lt;/code&gt; リソースでしか取得できません。  &lt;br&gt;&lt;code&gt;videos&lt;/code&gt; に関してはChannel ID からは取得できず、&lt;code&gt;search&lt;/code&gt; リソースを使用するしかないのですが、    &lt;br&gt;登録チャンネルが50だった場合、&lt;code&gt;search&lt;/code&gt; のコスト 50 × 50 で2,500 Queries を消費してしまうので課金する他方法がないようです。   &lt;br&gt;Quota 上限の開放に関しては&lt;a href=&quot;https://stackoverflow.com/questions/61281991/applying-for-additional-quota-for-youtube-api-as-an-individual-without-business/62686472#62686472&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;個人だと難しいみたい&lt;/a&gt;なので、白旗です。 &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 id=&quot;hed45b6dfb9&quot;&gt;一応作ったものはこちら &lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tesstesstex/stream_now&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;tesstesstex&amp;#x2F;stream_now&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Vue CLI でGoogleAppsScript アプリ を作成するまで]]></title><description><![CDATA[Vue CLI を使用したSPA をWebpack でなんとかGAS 上にデプロイできるようにならないかやってみた ]]></description><link>https://tesstesstex.vercel.appUZl-L_vYqclV</link><guid isPermaLink="false">https://tesstesstex.vercel.appUZl-L_vYqclV</guid><pubDate>Mon, 01 Feb 2021 19:10:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;h86c570885c&quot;&gt;VueCLI4 でGoogleAppsScript アプリを作成する&lt;/h2&gt;&lt;p&gt;&lt;br&gt;GoogleAppsScript (以下GAS) で簡易なWeb サイトやアプリケーションが作成できるのですが、 &lt;br&gt;それをVueCLI を用いて作成してみました。 &lt;br&gt;&lt;/p&gt;&lt;h3 id=&quot;he869694cb5&quot;&gt;Vue CLI のインストール&lt;/h3&gt;&lt;p&gt;&lt;br&gt;Vue.js のアプリケーションを簡単に作るためのCLI ツールであるVue CLI をインストールします。 &lt;br&gt;Vue CLI はglobal install する必要があるので注意。 &lt;br&gt;&lt;br&gt;なおnpm を使用する場合は適宜読み替えてください。 &lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ yarn global add @vue&amp;#x2F;cli @vue&amp;#x2F;cli-init
yarn global v1.22.10
[1&amp;#x2F;4] 🔍 Resolving packages...
[2&amp;#x2F;4] 🚚 Fetching packages...
[3&amp;#x2F;4] 🔗 Linking dependencies...
[4&amp;#x2F;4] 🔨 Building fresh packages...
success Installed &amp;quot;@vue&amp;#x2F;cli@4.5.11&amp;quot; with binaries:
     - vue
✨ Done in 197.86s.

$ vue --version
@vue&amp;#x2F;cli 4.5.11&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;* vue が動かない場合はグローバルインストールしたパッケージへのパスが通っていないと思われます。必要に応じてググってみてください。 &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 id=&quot;h702d09d558&quot;&gt;プロジェクトを作成&lt;/h3&gt;&lt;p&gt;&lt;br&gt;プロジェクト内にすべてのソースコードが入ります。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ vue create &amp;lt;appname&amp;gt;
* ここではappname は&amp;quot;vue-gas-app&amp;quot; とします。
** おそらくself singed certificate に関するエラーが生じるので、Global Protect を一時的に切断しましょう。
*** 終了後再接続するのを忘れずに。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;実行後、以下の初期設定用インタラクティブモードに入ります。 &lt;br&gt;今回は試しにManual で設定してみましょう。 &lt;/p&gt;&lt;pre&gt;&lt;code&gt;Vue CLI v4.5.11
? Please pick a preset: (Use arrow keys)
 Default ([Vue 2] babel, eslint)
 Default (Vue 3 Preview) ([Vue 3] babel, eslint)
❯Manually select features&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;? Check the features needed for your project: (Press &amp;lt;space&amp;gt; to select, &amp;lt;a&amp;gt; to toggle all, &amp;lt;i&amp;gt; to invert selection)
❯◉ Choose Vue version
 ◉ Babel
 ◯ TypeScript
 ◯ Progressive Web App (PWA) Support
 ◯ Router
 ◯ Vuex
 ◯ CSS Pre-processors
 ◉ Linter &amp;#x2F; Formatter
 ◯ Unit Testing
 ◯ E2E Testing&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;? Choose a version of Vue.js that you want to start the project with
❯ 2.x
 3.x (Preview)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;? Pick a linter &amp;#x2F; formatter config:
 ESLint with error prevention only
 ESLint + Airbnb config
 ESLint + Standard config
❯ ESLint + Prettier&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;? Pick additional lint features: (Press &amp;lt;space&amp;gt; to select, &amp;lt;a&amp;gt; to toggle all, &amp;lt;i&amp;gt; to invert selection)
❯◉ Lint on save
 ◯ Lint and fix on commit&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)
❯ In dedicated config files
 In package.json&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;? Save this as a preset for future projects? (y&amp;#x2F;N) n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;? Pick the package manager to use when installing dependencies: (Use arrow keys)
❯ Use Yarn
 Use NPM&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;✨ Creating project in &amp;#x2F;Users&amp;#x2F;user&amp;#x2F;work&amp;#x2F;vue-gas-app.
🗃 Initializing git repository...
⚙️ Installing CLI plugins. This might take a while...

yarn install v1.22.10
info No lockfile found.
[1&amp;#x2F;4] 🔍 Resolving packages...
[2&amp;#x2F;4] 🚚 Fetching packages...
[3&amp;#x2F;4] 🔗 Linking dependencies...
[4&amp;#x2F;4] 🔨 Building fresh packages...
success Saved lockfile.
✨ Done in 123.97s.
🚀 Invoking generators...
📦 Installing additional dependencies...

yarn install v1.22.10
[1&amp;#x2F;4] 🔍 Resolving packages...
[2&amp;#x2F;4] 🚚 Fetching packages...
[3&amp;#x2F;4] 🔗 Linking dependencies...
[4&amp;#x2F;4] 🔨 Building fresh packages...

success Saved lockfile.
✨ Done in 20.69s.
⚓ Running completion hooks...

📄 Generating README.md...

🎉 Successfully created project vue-gas-app.
👉 Get started with the following commands:

 $ cd vue-gas-app
 $ yarn serve&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;今回はVueCLI でデフォルトのビューのみのアプリを作成するので、Vue Router やVuex は使用しないものとします。   &lt;br&gt;パッケージのインストールが完了したら試しに一度動かしてみましょう。   &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd vue-app-demo

$ yarn serve&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 id=&quot;h526e8bc7fd&quot;&gt;GoogleAppsScript の用意&lt;/h3&gt;&lt;p&gt;&lt;br&gt;以下のリンクからGoogle Apps Script API を｢オン｣にしておきましょう。 &lt;br&gt;https:&amp;#x2F;&amp;#x2F;script.google.com&amp;#x2F;u&amp;#x2F;1&amp;#x2F;home&amp;#x2F;usersettings &lt;br&gt;&lt;br&gt;GAS のソースコードはclasp というCUI ツールによってローカル環境と同期することができます。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ yarn global add @google&amp;#x2F;clasp

$ clasp login

$ clasp create vue-gas-app
? Create which script?
 standalone
 docs
 sheets
 slides
 forms
❯ webapp
 api&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Created new webapp script: https:&amp;#x2F;&amp;#x2F;script.google.com&amp;#x2F;d&amp;#x2F;&amp;lt;id&amp;gt;&amp;#x2F;edit
Warning: files in subfolder are not accounted for unless you set a &amp;#x27;.claspignore&amp;#x27; file.
Cloned 1 file.
└─ appsscript.json&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;ここで新たにappsscript.json と.clasp.json が作成されます。 &lt;br&gt;最終的にGAS へは`clasp push` というコマンドでdist&amp;#x2F; 内のファイルをアップロードするのですが、 &lt;br&gt;dist&amp;#x2F; 内にappsscript.json やCode.js を配置することを避けるために、gas&amp;#x2F; というディレクトリを作成しましょう。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ mkdir gas

$ mv appsscript.json gas&amp;#x2F;

$ echo .clasp.json &amp;gt;&amp;gt; .gitignore&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;またgas&amp;#x2F; 内にGAS のエントリポイントとなるCode.js を作成します。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# Code.js
function doGet() {
 return getHtml()
}
function getHtml() {
 const html = HtmlService.createTemplateFromFile(&amp;#x27;index&amp;#x27;)
 return html
   .evaluate()
   .setTitle(&amp;#x27;vue-gas-app&amp;#x27;)
   .addMetaTag(&amp;#x27;viewport&amp;#x27;, &amp;#x27;width=device-width, initial-scale=1&amp;#x27;)
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;dist&amp;#x2F; 内のファイルをGAS へpush するために.clasp.json を以下のように修正します。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
 &amp;quot;scriptId&amp;quot;:&amp;quot;&amp;lt;id&amp;gt;&amp;quot;,
 &amp;quot;rootDir&amp;quot;: &amp;quot;dist&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 id=&quot;hf222bfc855&quot;&gt;ビルドの設定&lt;/h3&gt;&lt;p&gt;&lt;br&gt;作成したgas&amp;#x2F; 内のファイルをビルドの際にdist&amp;#x2F; にコピーしてくれるように、webpack の設定をします。 &lt;br&gt;VueCLI では従来のようにwebpack.config.js に設定するのではなく、vue.config.js 内に記述します。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# vue.config.js
const CopyWebpackPlugin = require(&amp;#x27;copy-webpack-plugin&amp;#x27;)

module.exports = {
 configureWebpack: {
   plugins: [
     new CopyWebpackPlugin([
       {
         from: path.resolve(__dirname, &amp;#x27;.&amp;#x2F;gas&amp;#x27;),
         ignore: [&amp;#x27;.*&amp;#x27;]
       }
     ])
   ]
 }
};&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;また、VueCLI の通常のバンドルではGAS では読み込めない場合があるため、すべてをインラインでバンドルすることにします。&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# vue.config.js
const path = require(&amp;#x27;path&amp;#x27;)
const CopyWebpackPlugin = require(&amp;#x27;copy-webpack-plugin&amp;#x27;)
const HtmlWebpackInlineSourcePlugin = require(&amp;#x27;html-webpack-inline-source-plugin&amp;#x27;)

module.exports = {
 publicPath: &amp;#x27;&amp;#x2F;public&amp;#x27;,
 chainWebpack: config =&amp;gt; {
   config
     .plugin(&amp;#x27;html&amp;#x27;)
     .tap(args =&amp;gt; {
       args[0].template = &amp;#x27;.&amp;#x2F;public&amp;#x2F;index.html&amp;#x27;
       args[0].inlineSource = &amp;#x27;.(vue|js|css)&amp;#x27;
       return args
     })
 },
 configureWebpack: {
   plugins: [
     new HtmlWebpackInlineSourcePlugin(),
     new CopyWebpackPlugin([
       {
         from: path.resolve(__dirname, &amp;#x27;.&amp;#x2F;gas&amp;#x27;),
         ignore: [&amp;#x27;.*&amp;#x27;]
       }
     ])
   ]
 }
};&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 id=&quot;h2cea75c696&quot;&gt;deploy&lt;/h3&gt;&lt;p&gt;&lt;br&gt;では実際にビルドしてみましょう。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ yarn build&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;ビルドしたものをclasp push でデプロイします。 &lt;br&gt;また、不要なファイルがアップロードされないように事前に.claspignore を設定します。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#x2F;* .claspignore *&amp;#x2F;
**&amp;#x2F;**
static&amp;#x2F;**
static&amp;#x2F;css&amp;#x2F;**
!appsscript.json
!Code.js
!index.html&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ clasp push&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;これでGAS の画面からデプロイすればOKです。&lt;br&gt;&lt;/p&gt;&lt;h3 id=&quot;h22ededadd0&quot;&gt;Appendix&lt;/h3&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h4 id=&quot;hc5efdb529b&quot;&gt;Linter とFormatter&lt;/h4&gt;&lt;p&gt;&lt;br&gt;Linting rules に関しては好みが分かれますが、ここでは標準的に使用されているPrettier をフォーマッタに使用します。 &lt;br&gt;VueCLI を使用してESLint + Prettier をインストールすると、自動的にESLint とPrettier で競合するルールをオフにしてくれる`eslint-config-prettier` がインストールされるので、基本的には自分で特にルールをいじる必要はありません。 &lt;br&gt;私の場合は .prettierrc.js にてシングルクォートのみ有効にしてあります。 &lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# .prettierrc.js
module.exports = {
 singleQuote: true,
};&lt;/code&gt;&lt;/pre&gt;</content:encoded></item></channel></rss>