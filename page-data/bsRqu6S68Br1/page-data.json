{"componentChunkName":"component---src-templates-post-template-js","path":"/bsRqu6S68Br1","result":{"data":{"microcmsArticles":{"id":"b99bf356-1092-5bb2-a8b1-f27d20fac849","articlesId":"bsRqu6S68Br1","contents":"**:warning:この記事は2019/10/04 にQiita に投稿したものです**\n\n# TL; DR\n\nFlaskでファイルアップロードAPIを実装し、REST Clientで叩きました。\n\n - [ソースコード(Github)](https://github.com/tesstesstex/API_TEST)\n\n# はじめに\nこの記事ではFlaskで簡単なGETのAPIを実装するところから、\n実際にファイルをPOSTするAPIを実装するところまでを、3 Stepsで記載しています。\nFlaskにあまり馴染みが無い方も超簡単にファイルアップロードAPIできるようになれます（きっと）。\n\n## 環境\n- Python 3.7\n- Flask 1.1\n- VSCode 1.38\n\n>ディレクトリ構成\n/\n├ data/\n├ \\_\\_init\\_\\_.py\n├ api.py\n├ call.http\n├ face.png\n└ requirements.txt\n\n# 1. APIの実装(JSONのGET)\n\nFlaskでのAPIの実装マジで簡単。やったぜ。\n\n## 1-1. 実装\n\n```python:api.py\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n\n@app.route('/api/item', methods=['GET'])\ndef get_item():\n   item = {\"item_name\": 'hogehoge'}\n\n   return jsonify(item) \n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\nこれだけ。やったぜ。\n\n## 1-2. 叩く\n\nさっそく試しに叩いてみよう！\n......あれよく考えたらあんまり叩き方知らないな？(情弱)\n\n### 1-2-0. REST Client\n\nググってみたら次の記事を見つけました。\n\n- [VS Code上でHTTPリクエストを送信し、VS Code上でレスポンスを確認できる「REST Client」拡張の紹介](https://qiita.com/toshi0607/items/c4440d3fbfa72eac840c)\n\n>REST Client allows you to send HTTP request and view the response in Visual Studio Code directly.\n\nVSCode上で HTTP リクエストができるとな？便利そう。\n早速 [REST Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) を入れて叩いてみました。\n\n### 1-2-1. Flask起動\n\n```sh\n$ python api.py \n* Serving Flask app \"api\" (lazy loading)\n* Environment: production\n  WARNING: This is a development server. Do not use it in a production deployment.\n  Use a production WSGI server instead.\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 111-858-152\n```\n\n### 1-2-2. リクエスト\n```:call.http\n### GET item\nGET http://localhost:5000/api/item\n```\nCmd + Option + R で送信！　（Windows は Ctl + Alt + R）\n\n### 1-2-3. 結果\n\n```http:response\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 30\nServer: Werkzeug/0.16.0 Python/3.7.3\nDate: Thu, 03 Oct 2019 16:54:12 GMT\n\n{\n  \"item_name\": \"hogehoge\"\n}\n```\n\nやったぜ。\n\n# 2. API 実装(ユーザー情報のPOST)\nGET はうまくいったので POST も試してみよう。\nということでまずはFlaskでAPIを実装。\n\n## 2-1. 実装\n```python:api.py\nfrom flask import Flask, jsonify, request\nimport bleach\n\napp = Flask(__name__)\n\nTOKEN = 'YOUR_TOKEN'\n\n@app.route('/api/v1/user', methods=['POST'])\ndef add_user():\n    # check token\n    header = request.headers.get('Authorization', None)\n    _, token = header.split()\n    if token != TOKEN:\n        return jsonify({'Forbidden': 'Access is denied'}), 403\n\n    # method check\n    if request.method != 'POST':\n        return jsonify({'Method Not Allowed': 'Method is invalid.'}), 405\n\n    # create new user\n    new_user = {}\n    for key in request.form.keys():\n        new_user[key] = bleach.clean(request.form.get(key))\n\n    return jsonify(new_user)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\nこれだけ。やったぜ。\nほんとはDBと繋いで new_user を登録したりしたんですけど、今回は割愛。\n\nFlask でリクエストを受け取る時は **request** を使用します。\n今回は Content-Type は multipart/form-data で送信するつもりなので、request.form を使用しています。\n他にもパラメータを受け取る場合は request.args 、json を受け取る時は request.json を使用します。\n\n## 2-2. 叩く\n\n### 2-2-1. Flask起動\nさっきと同じようにapi.pyを動かしておきましょう。\n\n### 2-2-2. リクエスト\n```:call.http\n#######\n### POST user info\nPOST http://localhost:5000/api/v1/user\nAuthorization: Bearer YOUR_TOKEN\nContent-Type: multipart/form-data; boundary=HOGEHOGEBOUNDARY\n\n--HOGEHOGEBOUNDARY\nContent-Disposition: form-data; name=user_name\n\nSAKAMOTO RYOMA\n--HOGEHOGEBOUNDARY\nContent-Disposition: form-data; name=user_email\n\nryoma.sakamoto@...\n--HOGEHOGEBOUNDARY--\n```\nmultipart 形式でPOSTする場合は boundary っていうのを設定するんで、\n送信する要素ごとに **--{your boundary}** を記述して、\n要素の最後は **--{your boundary}--** で締めくくっときましょう。 \nこのへんは[RFC7578](https://tools.ietf.org/html/rfc7578)で規定されていますのでご確認ください。\n\n**Content-Disposition** の name が記述されていますが、これはHTMLの\n\n```html:html\n<form>\n <input name=\"user_name\">\n</form>\n```\nと同じです。\n\n### 2-2-3. 結果\n```http:response\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 98\nServer: Werkzeug/0.16.0 Python/3.7.3\nDate: Thu, 03 Oct 2019 17:24:57 GMT\n\n{\n  \"user_email\": \"tesstesstex@...\",\n  \"user_name\": \"Tesstess Tex\"\n}\n```\nやったぜ。無事POSTできましたね。\n\n# 3. APIの実装(アップロードファイルのPOST)\nさて、ようやく本題です。\n\nユーザー情報送るなら顔写真とかも送れた方が良いよね？そうでもないですか？\nファイルアップロードのAPIって実装めんどくさいよなぁと思ってましたが超簡単でした！\nそうFlaskとREST Clientならね。\n\n## 3-1. 実装\n\n```python:api.py\nfrom flask import Flask, jsonify, request\nimport bleach\n\napp = Flask(__name__)\n\nTOKEN = 'YOUR_TOKEN'\n\n\n@app.route('/api/v1/user', methods=['POST'])\ndef add_user():\n    # check token\n    header = request.headers.get('Authorization', None)\n    if header is not None:\n        _, token = header.split()\n        if token != TOKEN:\n            return jsonify({'Forbidden': 'Access is denied'}), 403\n    else:\n        return jsonify({'Forbidden': 'Access is denied'}), 403\n\n    # method check\n    if request.method != 'POST':\n        return jsonify({'Method Not Allowed': 'Method is invalid.'}), 405\n\n    # create new user\n    new_user = {}\n    for key in request.form.keys():\n        new_user[key] = bleach.clean(request.form.get(key))\n\n    # save uploaded file into data folder\n    for file in request.files:\n        if file is None:\n            break\n        upload_file = request.files.get(file)\n        upload_path = 'data/%s' % upload_file.filename\n        upload_file.save(upload_path)\n        new_user[file] = upload_file.filename\n\n    return jsonify(new_user)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\nこれだけ。やったぜ。\nFlaskでファイルを受け取る場合、 **request.files** の中に入っていきます。\n\n## 3-2. 叩く\n### 3-2-1. Flask起動\nさっきと同じようにapi.pyを動かしておきましょう。\nまた、事前に顔写真 face.png を api.py と同じディレクトリに置いておきましょう。\n\n### 3-2-2. リクエスト\n```:call.http\n#######\n### OK\nPOST http://localhost:5000/api/v1/user\nAuthorization: Bearer YOUR_TOKEN\nContent-Type: multipart/form-data; boundary=HOGEHOGEBOUNDARY\n\n--HOGEHOGEBOUNDARY\nContent-Disposition: form-data; name=user_name\n\nTesstess Tex\n--HOGEHOGEBOUNDARY\nContent-Disposition: form-data; name=user_email\n\nryoma.sakamoto@...\n--HOGEHOGEBOUNDARY\nContent-Disposition: form-data; name=\"file\"; filename=\"face.png\"\nContent-Type: application/octet-stream\n\n< ./face.png\n--HOGEHOGEBOUNDARY--\n```\n\n### 3-2-3. 結果\n```http:response\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 98\nServer: Werkzeug/0.16.0 Python/3.7.3\nDate: Thu, 03 Oct 2019 18:01:26 GMT\n\n{\n  \"file\": \"face.png\",\n  \"user_email\": \"tesstesstex@...\",\n  \"user_name\": \"Tesstess Tex\"\n}\n```\ndataフォルダをのぞいてみるとちゃんと face.png が保存されていました！\n<img alt=\"スクリーンショット 2019-10-04 3.03.35.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342105/33e79cd6-9b52-9a30-278c-c6dc3d83e1c8.png\">\nくぅ疲、これにて目的達成です。やったぜ。\n\n# 感想\nほんとFlask はAPI さくっと書けて優秀だなぁと思います。\n普段はAPIはNode.js のnode-fetch だったり、Python のrequests だったりで叩いているのですが、\ncurl について調べているときにREST Clientについて知ったので使ってみた次第です。\n\n# 参考\n### Qiita\n - [トークンを利用した認証・認可 API を実装するとき Authorization: Bearer ヘッダを使っていいのか調べた](https://qiita.com/uasi/items/cfb60588daa18c2ec6f5)\n \n### Auth0\n - [Python と Flask で RESTful API を開発する](https://auth0.com/blog/jp-developing-restful-apis-with-python-and-flask/)\n","category":"Development","date":"2019-10-04T03:00:00.000Z","description":"Flask で簡単なAPI サーバー立ててファイルをアップロードしてみる","tags":["Python 3"],"title":"Flask 使ったAPI サーバーの基本"}},"pageContext":{"slug":"bsRqu6S68Br1"}},"staticQueryHashes":["2758407812","3827264240","825871152"]}