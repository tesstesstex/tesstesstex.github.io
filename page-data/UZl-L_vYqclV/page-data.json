{"componentChunkName":"component---src-templates-post-template-js","path":"/UZl-L_vYqclV","result":{"data":{"microcmsArticles":{"id":"38a29141-27e6-51b7-8375-5bc76601b422","articlesId":"UZl-L_vYqclV","contents":"<h2 id=\"h86c570885c\">VueCLI4 でGoogleAppsScript アプリを作成する</h2><p><br>GoogleAppsScript (以下GAS) で簡易なWeb サイトやアプリケーションが作成できるのですが、 <br>それをVueCLI を用いて作成してみました。 <br></p><h3 id=\"he869694cb5\">Vue CLI のインストール</h3><p><br>Vue.js のアプリケーションを簡単に作るためのCLI ツールであるVue CLI をインストールします。 <br>Vue CLI はglobal install する必要があるので注意。 <br><br>なおnpm を使用する場合は適宜読み替えてください。 </p><pre><code>$ yarn global add @vue&#x2F;cli @vue&#x2F;cli-init\nyarn global v1.22.10\n[1&#x2F;4] 🔍 Resolving packages...\n[2&#x2F;4] 🚚 Fetching packages...\n[3&#x2F;4] 🔗 Linking dependencies...\n[4&#x2F;4] 🔨 Building fresh packages...\nsuccess Installed &quot;@vue&#x2F;cli@4.5.11&quot; with binaries:\n     - vue\n✨ Done in 197.86s.\n\n$ vue --version\n@vue&#x2F;cli 4.5.11</code></pre><p>* vue が動かない場合はグローバルインストールしたパッケージへのパスが通っていないと思われます。必要に応じてググってみてください。 <br><br></p><h3 id=\"h702d09d558\">プロジェクトを作成</h3><p><br>プロジェクト内にすべてのソースコードが入ります。 <br></p><pre><code>$ vue create &lt;appname&gt;\n* ここではappname は&quot;vue-gas-app&quot; とします。\n** おそらくself singed certificate に関するエラーが生じるので、Global Protect を一時的に切断しましょう。\n*** 終了後再接続するのを忘れずに。</code></pre><p><br>実行後、以下の初期設定用インタラクティブモードに入ります。 <br>今回は試しにManual で設定してみましょう。 </p><pre><code>Vue CLI v4.5.11\n? Please pick a preset: (Use arrow keys)\n Default ([Vue 2] babel, eslint)\n Default (Vue 3 Preview) ([Vue 3] babel, eslint)\n❯Manually select features</code></pre><p><br></p><pre><code>? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n❯◉ Choose Vue version\n ◉ Babel\n ◯ TypeScript\n ◯ Progressive Web App (PWA) Support\n ◯ Router\n ◯ Vuex\n ◯ CSS Pre-processors\n ◉ Linter &#x2F; Formatter\n ◯ Unit Testing\n ◯ E2E Testing</code></pre><p><br></p><pre><code>? Choose a version of Vue.js that you want to start the project with\n❯ 2.x\n 3.x (Preview)</code></pre><p><br></p><pre><code>? Pick a linter &#x2F; formatter config:\n ESLint with error prevention only\n ESLint + Airbnb config\n ESLint + Standard config\n❯ ESLint + Prettier</code></pre><p><br></p><pre><code>? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n❯◉ Lint on save\n ◯ Lint and fix on commit</code></pre><p><br></p><pre><code>? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)\n❯ In dedicated config files\n In package.json</code></pre><p><br></p><pre><code>? Save this as a preset for future projects? (y&#x2F;N) n</code></pre><p><br></p><pre><code>? Pick the package manager to use when installing dependencies: (Use arrow keys)\n❯ Use Yarn\n Use NPM</code></pre><p><br></p><pre><code>✨ Creating project in &#x2F;Users&#x2F;user&#x2F;work&#x2F;vue-gas-app.\n🗃 Initializing git repository...\n⚙️ Installing CLI plugins. This might take a while...\n\nyarn install v1.22.10\ninfo No lockfile found.\n[1&#x2F;4] 🔍 Resolving packages...\n[2&#x2F;4] 🚚 Fetching packages...\n[3&#x2F;4] 🔗 Linking dependencies...\n[4&#x2F;4] 🔨 Building fresh packages...\nsuccess Saved lockfile.\n✨ Done in 123.97s.\n🚀 Invoking generators...\n📦 Installing additional dependencies...\n\nyarn install v1.22.10\n[1&#x2F;4] 🔍 Resolving packages...\n[2&#x2F;4] 🚚 Fetching packages...\n[3&#x2F;4] 🔗 Linking dependencies...\n[4&#x2F;4] 🔨 Building fresh packages...\n\nsuccess Saved lockfile.\n✨ Done in 20.69s.\n⚓ Running completion hooks...\n\n📄 Generating README.md...\n\n🎉 Successfully created project vue-gas-app.\n👉 Get started with the following commands:\n\n $ cd vue-gas-app\n $ yarn serve</code></pre><p><br>今回はVueCLI でデフォルトのビューのみのアプリを作成するので、Vue Router やVuex は使用しないものとします。   <br>パッケージのインストールが完了したら試しに一度動かしてみましょう。   <br></p><pre><code>$ cd vue-app-demo\n\n$ yarn serve</code></pre><p><br></p><h3 id=\"h526e8bc7fd\">GoogleAppsScript の用意</h3><p><br>以下のリンクからGoogle Apps Script API を｢オン｣にしておきましょう。 <br>https:&#x2F;&#x2F;script.google.com&#x2F;u&#x2F;1&#x2F;home&#x2F;usersettings <br><br>GAS のソースコードはclasp というCUI ツールによってローカル環境と同期することができます。 <br></p><pre><code>$ yarn global add @google&#x2F;clasp\n\n$ clasp login\n\n$ clasp create vue-gas-app\n? Create which script?\n standalone\n docs\n sheets\n slides\n forms\n❯ webapp\n api</code></pre><p><br></p><pre><code>Created new webapp script: https:&#x2F;&#x2F;script.google.com&#x2F;d&#x2F;&lt;id&gt;&#x2F;edit\nWarning: files in subfolder are not accounted for unless you set a &#x27;.claspignore&#x27; file.\nCloned 1 file.\n└─ appsscript.json</code></pre><p><br>ここで新たにappsscript.json と.clasp.json が作成されます。 <br>最終的にGAS へは`clasp push` というコマンドでdist&#x2F; 内のファイルをアップロードするのですが、 <br>dist&#x2F; 内にappsscript.json やCode.js を配置することを避けるために、gas&#x2F; というディレクトリを作成しましょう。 <br></p><pre><code>$ mkdir gas\n\n$ mv appsscript.json gas&#x2F;\n\n$ echo .clasp.json &gt;&gt; .gitignore</code></pre><p><br>またgas&#x2F; 内にGAS のエントリポイントとなるCode.js を作成します。 <br></p><pre><code># Code.js\nfunction doGet() {\n return getHtml()\n}\nfunction getHtml() {\n const html = HtmlService.createTemplateFromFile(&#x27;index&#x27;)\n return html\n   .evaluate()\n   .setTitle(&#x27;vue-gas-app&#x27;)\n   .addMetaTag(&#x27;viewport&#x27;, &#x27;width=device-width, initial-scale=1&#x27;)\n}</code></pre><p><br>dist&#x2F; 内のファイルをGAS へpush するために.clasp.json を以下のように修正します。 <br></p><pre><code>{\n &quot;scriptId&quot;:&quot;&lt;id&gt;&quot;,\n &quot;rootDir&quot;: &quot;dist&quot;\n}</code></pre><p><br></p><h3 id=\"hf222bfc855\">ビルドの設定</h3><p><br>作成したgas&#x2F; 内のファイルをビルドの際にdist&#x2F; にコピーしてくれるように、webpack の設定をします。 <br>VueCLI では従来のようにwebpack.config.js に設定するのではなく、vue.config.js 内に記述します。 <br></p><pre><code># vue.config.js\nconst CopyWebpackPlugin = require(&#x27;copy-webpack-plugin&#x27;)\n\nmodule.exports = {\n configureWebpack: {\n   plugins: [\n     new CopyWebpackPlugin([\n       {\n         from: path.resolve(__dirname, &#x27;.&#x2F;gas&#x27;),\n         ignore: [&#x27;.*&#x27;]\n       }\n     ])\n   ]\n }\n};</code></pre><p><br>また、VueCLI の通常のバンドルではGAS では読み込めない場合があるため、すべてをインラインでバンドルすることにします。<br></p><pre><code># vue.config.js\nconst path = require(&#x27;path&#x27;)\nconst CopyWebpackPlugin = require(&#x27;copy-webpack-plugin&#x27;)\nconst HtmlWebpackInlineSourcePlugin = require(&#x27;html-webpack-inline-source-plugin&#x27;)\n\nmodule.exports = {\n publicPath: &#x27;&#x2F;public&#x27;,\n chainWebpack: config =&gt; {\n   config\n     .plugin(&#x27;html&#x27;)\n     .tap(args =&gt; {\n       args[0].template = &#x27;.&#x2F;public&#x2F;index.html&#x27;\n       args[0].inlineSource = &#x27;.(vue|js|css)&#x27;\n       return args\n     })\n },\n configureWebpack: {\n   plugins: [\n     new HtmlWebpackInlineSourcePlugin(),\n     new CopyWebpackPlugin([\n       {\n         from: path.resolve(__dirname, &#x27;.&#x2F;gas&#x27;),\n         ignore: [&#x27;.*&#x27;]\n       }\n     ])\n   ]\n }\n};</code></pre><p><br></p><h3 id=\"h2cea75c696\">deploy</h3><p><br>では実際にビルドしてみましょう。 <br></p><pre><code>$ yarn build</code></pre><p><br>ビルドしたものをclasp push でデプロイします。 <br>また、不要なファイルがアップロードされないように事前に.claspignore を設定します。 <br></p><pre><code>&#x2F;* .claspignore *&#x2F;\n**&#x2F;**\nstatic&#x2F;**\nstatic&#x2F;css&#x2F;**\n!appsscript.json\n!Code.js\n!index.html</code></pre><p><br></p><pre><code>$ clasp push</code></pre><p><br>これでGAS の画面からデプロイすればOKです。<br></p><h3 id=\"h22ededadd0\">Appendix</h3><p><br></p><h4 id=\"hc5efdb529b\">Linter とFormatter</h4><p><br>Linting rules に関しては好みが分かれますが、ここでは標準的に使用されているPrettier をフォーマッタに使用します。 <br>VueCLI を使用してESLint + Prettier をインストールすると、自動的にESLint とPrettier で競合するルールをオフにしてくれる`eslint-config-prettier` がインストールされるので、基本的には自分で特にルールをいじる必要はありません。 <br>私の場合は .prettierrc.js にてシングルクォートのみ有効にしてあります。 <br></p><pre><code># .prettierrc.js\nmodule.exports = {\n singleQuote: true,\n};</code></pre>","category":"Development","date":"2021-02-01T19:10:32.169Z","description":"Vue CLI を使用したSPA をWebpack でなんとかGAS 上にデプロイできるようにならないかやってみた ","tags":["GAS","Vue.js"],"title":"Vue CLI でGoogleAppsScript アプリ を作成するまで"}},"pageContext":{"slug":"UZl-L_vYqclV"}},"staticQueryHashes":["2758407812","3827264240","825871152"]}