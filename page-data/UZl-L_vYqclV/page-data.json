{"componentChunkName":"component---src-templates-post-template-js","path":"/UZl-L_vYqclV","result":{"data":{"microcmsArticles":{"id":"38a29141-27e6-51b7-8375-5bc76601b422","articlesId":"UZl-L_vYqclV","contents":"# VueCLI4 でGoogleAppsScript アプリを作成する\n\nGoogleAppsScript (以下GAS) で簡易なWeb サイトやアプリケーションが作成できるのですが、  \nそれをVueCLI を用いて作成してみました。  \n\n## Vue CLI のインストール\n\nVue.js のアプリケーションを簡単に作るためのCLI ツールであるVue CLI をインストールします。  \nVue CLI はglobal install する必要があるので注意。  \n\nなおnpm を使用する場合は適宜読み替えてください。  \n```\n$ yarn global add @vue/cli @vue/cli-init\nyarn global v1.22.10\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 🔨  Building fresh packages...\nsuccess Installed \"@vue/cli@4.5.11\" with binaries:\n      - vue\n✨  Done in 197.86s.\n\n$ vue --version\n@vue/cli 4.5.11\n```\n* vue が動かない場合はグローバルインストールしたパッケージへのパスが通っていないと思われます。必要に応じてググってみてください。  \n\n\n## プロジェクトを作成\n\nプロジェクト内にすべてのソースコードが入ります。  \n\n```\n$ vue create <appname>\n* ここではappname は\"vue-gas-app\" とします。\n** おそらくself singed certificate に関するエラーが生じるので、Global Protect を一時的に切断しましょう。\n*** 終了後再接続するのを忘れずに。\n```\n\n実行後、以下の初期設定用インタラクティブモードに入ります。  \n今回は試しにManual で設定してみましょう。 \n```\nVue CLI v4.5.11\n? Please pick a preset: (Use arrow keys)\n  Default ([Vue 2] babel, eslint)\n  Default (Vue 3 Preview) ([Vue 3] babel, eslint)\n❯Manually select features\n```\n\n```\n? Check the features needed for your project: (Press <space> to select, <a> to toggle all, <i> to invert selection)\n❯◉ Choose Vue version\n ◉ Babel\n ◯ TypeScript\n ◯ Progressive Web App (PWA) Support\n ◯ Router\n ◯ Vuex\n ◯ CSS Pre-processors\n ◉ Linter / Formatter\n ◯ Unit Testing\n ◯ E2E Testing\n```\n\n```\n? Choose a version of Vue.js that you want to start the project with\n❯ 2.x\n  3.x (Preview)\n```\n\n```\n? Pick a linter / formatter config:\n  ESLint with error prevention only\n  ESLint + Airbnb config\n  ESLint + Standard config\n❯ ESLint + Prettier\n```\n\n```\n? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)\n❯◉ Lint on save\n ◯ Lint and fix on commit\n```\n\n```\n? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)\n❯ In dedicated config files\n  In package.json\n```\n\n```\n? Save this as a preset for future projects? (y/N) n\n```\n\n```\n? Pick the package manager to use when installing dependencies: (Use arrow keys)\n❯ Use Yarn\n  Use NPM\n```\n\n```\n✨  Creating project in /Users/user/work/vue-gas-app.\n🗃  Initializing git repository...\n⚙️  Installing CLI plugins. This might take a while...\n\nyarn install v1.22.10\ninfo No lockfile found.\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 🔨  Building fresh packages...\nsuccess Saved lockfile.\n✨  Done in 123.97s.\n🚀  Invoking generators...\n📦  Installing additional dependencies...\n\nyarn install v1.22.10\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 🔨  Building fresh packages...\n\nsuccess Saved lockfile.\n✨  Done in 20.69s.\n⚓  Running completion hooks...\n\n📄  Generating README.md...\n\n🎉  Successfully created project vue-gas-app.\n👉  Get started with the following commands:\n\n $ cd vue-gas-app\n $ yarn serve\n```\n\n今回はVueCLI でデフォルトのビューのみのアプリを作成するので、Vue Router やVuex は使用しないものとします。    \nパッケージのインストールが完了したら試しに一度動かしてみましょう。    \n\n```\n$ cd vue-app-demo\n\n$ yarn serve\n```\n\n## GoogleAppsScript の用意\n\n以下のリンクからGoogle Apps Script API を｢オン｣にしておきましょう。  \nhttps://script.google.com/u/1/home/usersettings  \n\nGAS のソースコードはclasp というCUI ツールによってローカル環境と同期することができます。  \n\n```\n$ yarn global add @google/clasp\n\n$ clasp login\n\n$ clasp create vue-gas-app\n? Create which script?\n  standalone\n  docs\n  sheets\n  slides\n  forms\n❯ webapp\n  api\n```\n\n```\nCreated new webapp script: https://script.google.com/d/<id>/edit\nWarning: files in subfolder are not accounted for unless you set a '.claspignore' file.\nCloned 1 file.\n└─ appsscript.json\n```\n\nここで新たにappsscript.json と.clasp.json が作成されます。  \n最終的にGAS へは`clasp push` というコマンドでdist/ 内のファイルをアップロードするのですが、  \ndist/ 内にappsscript.json やCode.js を配置することを避けるために、gas/ というディレクトリを作成しましょう。  \n\n```\n$ mkdir gas\n\n$ mv appsscript.json gas/\n\n$ echo .clasp.json >> .gitignore\n```\n\nまたgas/ 内にGAS のエントリポイントとなるCode.js を作成します。  \n\n```javascript\n# Code.js\nfunction doGet() {\n  return getHtml()\n}\nfunction getHtml() {\n  const html = HtmlService.createTemplateFromFile('index')\n  return html\n    .evaluate()\n    .setTitle('vue-gas-app')\n    .addMetaTag('viewport', 'width=device-width, initial-scale=1')\n}\n```\n\ndist/ 内のファイルをGAS へpush するために.clasp.json を以下のように修正します。  \n\n```json\n{\n  \"scriptId\":\"<id>\",\n  \"rootDir\": \"dist\"\n}\n```\n\n## ビルドの設定\n\n作成したgas/ 内のファイルをビルドの際にdist/ にコピーしてくれるように、webpack の設定をします。  \nVueCLI では従来のようにwebpack.config.js に設定するのではなく、vue.config.js 内に記述します。  \n\n```javascript\n# vue.config.js\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\n\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      new CopyWebpackPlugin([\n        {\n          from: path.resolve(__dirname, './gas'),\n          ignore: ['.*']\n        }\n      ])\n    ]\n  }\n};\n```\n\nまた、VueCLI の通常のバンドルではGAS では読み込めない場合があるため、すべてをインラインでバンドルすることにします。\n\n```javascript\n# vue.config.js\nconst path = require('path')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackInlineSourcePlugin = require('html-webpack-inline-source-plugin')\n\nmodule.exports = {\n  publicPath: '/public',\n  chainWebpack: config => {\n    config\n      .plugin('html')\n      .tap(args => {\n        args[0].template = './public/index.html'\n        args[0].inlineSource = '.(vue|js|css)'\n        return args\n      })\n  },\n  configureWebpack: {\n    plugins: [\n      new HtmlWebpackInlineSourcePlugin(),\n      new CopyWebpackPlugin([\n        {\n          from: path.resolve(__dirname, './gas'),\n          ignore: ['.*']\n        }\n      ])\n    ]\n  }\n};\n```\n\n## deploy\n\nでは実際にビルドしてみましょう。  \n\n```\n$ yarn build\n```\n\nビルドしたものをclasp push でデプロイします。  \nまた、不要なファイルがアップロードされないように事前に.claspignore を設定します。  \n\n```\n/* .claspignore */\n**/**\nstatic/**\nstatic/css/**\n!appsscript.json\n!Code.js\n!index.html\n```\n\n```\n$ clasp push\n```\n\nこれでGAS の画面からデプロイすればOKです。\n\n## Appendix\n\n### Linter とFormatter\n\nLinting rules に関しては好みが分かれますが、ここでは標準的に使用されているPrettier をフォーマッタに使用します。  \nVueCLI を使用してESLint + Prettier をインストールすると、自動的にESLint とPrettier で競合するルールをオフにしてくれる`eslint-config-prettier` がインストールされるので、基本的には自分で特にルールをいじる必要はありません。  \n私の場合は .prettierrc.js にてシングルクォートのみ有効にしてあります。  \n\n```javascript\n# .prettierrc.js\nmodule.exports = {\n  singleQuote: true,\n};\n```\n","category":"Development","date":"2021-02-01T19:10:32.169Z","description":"Vue CLI を使用したSPA をWebpack でなんとかGAS 上にデプロイできるようにならないかやってみた ","tags":["GAS","Vue.js"],"title":"Vue CLI でGoogleAppsScript アプリ を作成するまで"}},"pageContext":{"slug":"UZl-L_vYqclV"}},"staticQueryHashes":["2758407812","3827264240","825871152"]}